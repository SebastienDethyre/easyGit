#!/bin/bash

nbFilesByLine=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesByLinePref`
nbWordsByCommit=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/wordsByLinePref`
filesDialogWidth=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/widthConfig`
CURRENT_DIR=`pwd`

factor=3
totalLineNumber=60
fichiersDisplay=1

one=1
two=2
three=3
four=4
five=5
six=6
seven=7
nine=9
ten=10
eleven=11
twelve=12
thirteen=13
fourteen=14
fifteen=15
sixteen=16
seventeen=17
twenty=20

GA="Add"
GAS="Add One"
GC="Commit"
GP="Push"
GRT="Reset"
GCR="Commit Reset"

GF="Fetch"
GS="Stash"
GR="Rebase"
GSP="Stash Pop"
GM="Merge"
OR="Ouvrir d√©pot"
GCL="Clone"

GLCP="Log Pick"
CP="Cherry-Pick"
GST="Status"
GL="Log"
GLL="Reflog"
GK="Checkout"
GB="Branch"
GAA="Add All"
GRA="Reset All"
GRM="Remove"
GE="Erase"

MD="D√©pot"
MF="Fichiers"
MI="Informations"
SC="Clear"
RL="R√©sultats par ligne"
AFF="Affichage"
CW="Largeur"

################# GENERAL FUNCTIONS ####################

notification(){
	zenity --notification\
    --window-icon="info" \
    --text="$1"
}

element_size(){
	temp=$1
	elemSize="${#temp}"
}

sticker(){
"\t<span color=\"$1\">$2</span>
<span color=\"$3\"><b>$(sed ':z;N;$! bz;s/\n/ /g;s/ /,  /g' ~/bin/gitDialog/$4 | xargs -n $nbFilesByLine echo -e '\t')</b></span>\n"
}

clear_screen(){
	clear
}

change_width(){
	width=`zenity --scale --title="Largeur  üìè"--text="\t\t        Largeur en pixels" --value=$filesDialogWidth --min-value=450 --max-value=1850 --step 50`
	case $? in
			0)
				filesDialogWidth=$width
				add_spaces
				echo $width > ~/bin/easyGit/widthConfig
				echo "Vous avez choisi $width pixels."
				fonction_fichiers ;;
			1)
				echo "Aucune valeur s√©lectionn√©e.";;
			-1)
				echo "Une erreur inattendue est survenue.";;
	esac
	2>/dev/null
}

switch_display(){
	if [ $fichiersDisplay -eq 1 ]; then
		fichiersDisplay=0
	else
		fichiersDisplay=1
	fi
}

checkFilesChanged(){
	git diff --name-only > ~/bin/easyGit/filesChanged
	git ls-files --other --exclude-standard > ~/bin/easyGit/filesUnfollowed
	git diff --name-only > ~/bin/easyGit/filesChangedAndUnfollowed
	git ls-files --other --exclude-standard >> ~/bin/easyGit/filesChangedAndUnfollowed
	git diff --name-only --cached > ~/bin/easyGit/filesStaged
	HASH_COMMIT=`git rev-parse HEAD`
	git diff-tree --no-commit-id --name-only -r $HASH_COMMIT > ~/bin/easyGit/filesCommitted
#	TEXT_COMMIT=`git log --format=%B -n 1 | xargs -n $nbWordsByCommit echo -e '\t'`
	TEXT_COMMIT=`git log --format=%B -n 1`
	TEXT_COMMIT=`echo "$TEXT_COMMIT" | fold -b$(($totalLineNumber - $two)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
	LAST_COMMIT_DATE_RAW=`git log -1 --format=%cd`
	LAST_COMMIT_DATE=${LAST_COMMIT_DATE_RAW::-6}
	REPO_ADRESS=`git config --get remote.origin.url`
	actualBranch=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/actualBranch`
	actualBranch=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/actualBranch`
}

open_repo(){
	xdg-open $REPO_ADRESS
}
#############################################################################################################################################################################
if([ -d .git ] ); then
	git for-each-ref --format='%(refname:short)' refs/heads/ > ~/bin/easyGit/branchesList
	git log --pretty=format:"%H			%s" > ~/bin/easyGit/ashesTexts
	cat .git/HEAD | cut -c 17- > ~/bin/easyGit/actualBranch
	actualBranch=`cat .git/HEAD | cut -c 17-`
	checkFilesChanged
	echo $REPO_ADRESS | xclip
else
	echo "Le r√©pertoire courant n'est pas un d√©pot Git."
	exit 0
fi
#############################################################################################################################################################################

LOGO_FULL_400="
\t\t<span color=\"#A10101\">      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó</span>
\t\t<span color=\"#AE0404\">     ‚ñà‚ñà‚ïî ‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö  ‚ïê‚ñà‚ñà‚ïî   ‚ïê‚ïù</span>
\t\t<span color=\"#C60606\">     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë   </span>
\t\t<span color=\"#D11E1E\">     ‚ñà‚ñà‚ïë      ‚ñà‚ñà ‚ïë ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë   </span>
\t\t<span color=\"#F54B4B\">      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ïî‚ïù ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë   </span>
\t\t<span color=\"#F65151\">       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö  ‚ïù       ‚ïö‚ïê‚ïù   </span>

\t<span color=\"darkblue\">$REPO_ADRESS</span>
\t<span color=\"blue\">$CURRENT_DIR</span>
"

add_spaces(){
	totalLineNumberFloat=`echo $filesDialogWidth / 8 | bc -l`
	totalLineNumber=${totalLineNumberFloat%.*}
	TOTAL_LINE=`printf %$totalLineNumber\s |tr " " "_"`
	simpleLineNumber=$(($totalLineNumber - $eleven))
	SIMPLE_LINE=`printf %$simpleLineNumber\s |tr " " "_"`
	REPO_ADRESS=`git config --get remote.origin.url | fold -b$(($totalLineNumber - $one)) | ( TAB=$'\t' ; sed "s/^/$TAB/" )`

	spaceRawLineSize="$(($totalLineNumber - $simpleLineNumber))"
	spaceLineSize="$(($spaceRawLineSize - $three))"
	SPACE_LINE=`printf %$spaceLineSize\s |tr " " " "`

	git1="<span color=\"#A10101\"> ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    </span>"
	git2="<span color=\"#AE0404\">‚ñà‚ñà‚ïî ‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö  ‚ïê‚ñà‚ñà‚ïî   ‚ïê‚ïù </span>"
	git3="<span color=\"#C60606\">‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë   </span>"
	git4="<span color=\"#D11E1E\">‚ñà‚ñà‚ïë      ‚ñà‚ñà ‚ïë ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë</span>"
	git5="<span color=\"#F54B4B\"> ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ïî‚ïù ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë   </span>"
	git6="<span color=\"#F65151\">  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö  ‚ïù       ‚ïö‚ïê‚ïù</span>"

	decorum=31
	trueGitLength="$(( ${#git1} - $decorum ))"
	spaceGitSize="$(($totalLineNumber - $trueGitLength - $three ))"
	SPACE_GIT=`printf %$spaceGitSize\s |tr " " " "`
	GIT="$SPACE_GIT$git1
$SPACE_GIT$git2
$SPACE_GIT$git3
$SPACE_GIT$git4
$SPACE_GIT$git5
$SPACE_GIT$git6

<span color=\"darkblue\">$REPO_ADRESS</span>
\t<span color=\"blue\">$CURRENT_DIR</span>
"
	diff=46
	commandsDialogWidth="$(($totalLineNumber - $diff))"
	commandsLineNumberFloat=`echo $commandsDialogWidth / $factor | bc -l`
	commandsLineNumber=${commandsLineNumberFloat%.*}
	commandsLineNumber=$(($commandsLineNumber - $four))

	spaceAddSize="$(($totalLineNumber + $commandsLineNumber))"
	spaceAddSSize="$(($spaceAddSize - $five))"
	spacePushSize="$(($spaceAddSize - $one))"
	spaceResetSize="$(($spaceAddSize - $two))"
	spaceAddAllSize="$(($spaceAddSize - $four))"
	spaceResetAllSize="$(($spaceAddSize - $five))"
	spaceCommitResetSize="$(($spaceAddSize - $twelve))"
	spaceStatusSize="$(($spaceAddSize - $three))"
	spaceRemove="$(($spaceAddSize - $four))"
	spaceDisplay="$(($spaceAddSize - $six))"
	spaceChangeWidthSize="$(($spaceAddSize - $four))"
	spaceCommitPendingSize="$(($totalLineNumber - $seventeen))"
	spaceFilesSymbols="$(($spaceAddSize - $sixteen))"

	SPACE_ADD=`printf %$spaceAddSize\s |tr " " " "`
	SPACE_ADD_S=`printf %$spaceAddSSize\s |tr " " " "`
	SPACE_COMMIT=`printf %$spaceAddSSize\s |tr " " " "`
	SPACE_PUSH=`printf %$spacePushSize\s |tr " " " "`
	SPACE_RESET=`printf %$spaceResetSize\s |tr " " " "`
	SPACE_ADD_ALL=`printf %$spaceAddAllSize\s |tr " " " "`
	SPACE_RESET_ALL=`printf %$spaceResetAllSize\s |tr " " " "`
	SPACE_COMMIT_RESET=`printf %$spaceCommitResetSize\s |tr " " " "`
	SPACE_STATUS=`printf %$spaceStatusSize\s |tr " " " "`
	SPACE_REMOVE=`printf %$spaceRemove\s |tr " " " "`
	SPACE_DISPLAY=`printf %$spaceDisplay\s |tr " " " "`
	SPACE_CHANGE_WIDTH=`printf %$spaceChangeWidthSize\s |tr " " " "`
	SPACE_COMMIT_PENDING=`printf %$spaceCommitPendingSize\s |tr " " " "`
	SPACE_FILES_SYMBOL=`printf %$spaceFilesSymbols\s |tr " " " "`
}

add_spaces

en_tete_depots(){
	checkFilesChanged
	actualBranch=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/actualBranch`
	nbFilesChangedSymbol="üîß"
	nbFilesChanged=`wc -l < ~/bin/easyGit/filesChanged`
	nbFilesUnfollowedSymbol="üß©"
	nbFilesUnfollowed=`wc -l < ~/bin/easyGit/filesUnfollowed`
	if [ $nbFilesChanged -eq 0 ]; then
		nbFilesChangedSymbol=""
		nbFilesChanged=""
	fi
	if [ $nbFilesUnfollowed -eq 0 ]; then
		nbFilesUnfollowedSymbol=""
		nbFilesUnfollowed=""
	fi
	EN_TETE="$LOGO_FULL_400
\t‚éá\t<span color=\"grey\">Branche :</span><span color=\"orange\"><b><i> [$actualBranch]</i></b></span>

\t<span color=\"green\">$nbFilesChangedSymbol  $nbFilesChanged</span>    <span color=\"#155162\">$nbFilesUnfollowedSymbol  $nbFilesUnfollowed</span>

$TMP_SCREEN
"
}

en_tete(){
	checkFilesChanged
	actualBranch=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/actualBranch`
	nbFilesChangedSymbol="üîß"
	nbFilesChanged=`wc -l < ~/bin/easyGit/filesChanged`
	nbFilesUnfollowedSymbol="üß©"
	nbFilesUnfollowed=`wc -l < ~/bin/easyGit/filesUnfollowed`
	if [ $nbFilesChanged -eq 0 ]; then
		nbFilesChangedSymbol=""
		nbFilesChanged=""
	fi
	if [ $nbFilesUnfollowed -eq 0 ]; then
		nbFilesUnfollowedSymbol=""
		nbFilesUnfollowed=""
	fi
	EN_TETE="$LOGO_FULL_400
\t‚éá\t<span color=\"grey\">Branche :</span><span color=\"orange\"><b><i> [$actualBranch]</i></b></span>

\t<span color=\"green\">$nbFilesChangedSymbol  $nbFilesChanged</span>    <span color=\"#155162\">$nbFilesUnfollowedSymbol  $nbFilesUnfollowed</span>
"
}

notification(){
	zenity --notification\
	--window-icon="info" \
	--text="$1"
}

_quitter(){
    exit 0
}

############### GIT FUNCTIONS ####################

git_clone_this(){
	if ret=`zenity  --file-selection --title="Clone  üìö" --text="R√©pertoire de r√©ception" --directory`; then
		titre=$ret
		if [ "$titre" = "" ]; then
			echo "Pas de r√©pertoire choisi"
			git_clone
		fi
	else
		echo "Annulation"
		git_clone
	fi
	if ([ -n "$titre" ]); then
		git clone $REPO_ADRESS $titre &> ~/bin/easyGit/gitTemp
		TMP_SCREEN=$(<~/bin/easyGit/gitTemp)
		lineNumber=52
		TMP_SCREEN=`echo "$TMP_SCREEN" | fold -b$(($lineNumber)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
		echo "Git clone de $REPO_ADRESS dans $titre"
		notification "Git clone de $REPO_ADRESS dans $titre"
	else
		echo "Pas de clone effectu√©"
	
	fi
}

git_clone_any(){
	if ret=`zenity --entry --title="Clone  üìö" --text='D√©pot √† cloner'`; then
		titre=$ret
		if [ "$titre" = "" ]; then
			echo "Il faut un d√©pot pour cloner"
			git_clone
		fi
	else
		echo "Annulation"
git_clone
	fi
	if ([ -n "$titre" ])
		then
			if ret=`zenity  --file-selection --title="Clone  üìö" --text="R√©pertoire de r√©ception" --directory`; then
				titre2=$ret
				if [ "$titre2" = "" ]; then
					echo "Pas de r√©pertoire choisi"
					git_clone_any
				fi
			else
				echo "Annulation"
git_clone_any
			fi
			if ([ -n "$titre2" ]); then
				git clone $titre $titre2 &> ~/bin/easyGit/gitTemp
				TMP_SCREEN=$(<~/bin/easyGit/gitTemp)
				lineNumber=52
				TMP_SCREEN=`echo "$TMP_SCREEN" | fold -b$(($lineNumber)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
				echo "Git clone de $titre dans $titre2"
				notification "Git clone de $titre dans $titre2"
				unset titre
			else
				echo "Pas de clone effectu√©"
git_clone_any
			fi
		else
			echo "Pas de clone effectu√©"
			git_clone
	fi
}

git_clone(){
	if ret=`zenity --list --title="Clone   üìö" --text="" --column="Que d√©sirez-vous ?" "Cloner ce d√©pot" "Cloner un autre d√©pot"`; then
		titre=$ret
		if [ "$titre" = "" ]; then
			echo "Aucun choix effectu√©"
		fi
	else
		echo "Annulation"
		fonction_depots
	fi
	if ([ -n "$titre" ]); then
		if [ "$titre" = "Cloner ce d√©pot" ]; then
			unset titre
			git_clone_this
		elif [ "$titre" = "Cloner un autre d√©pot" ]; then
			unset titre
			git_clone_any
		fi
	else
		echo "Aucun clone effectu√©"
		fonction_depots
	fi
	2>/dev/null
}

git_fetch(){
	REPO_ADRESS=`git config --get remote.origin.url`
	git fetch
	echo "Git Fetch du d√©pot $REPO_ADRESS"
	notification "Git Fetch du d√©pot $REPO_ADRESS"
}

git_stash(){
	git stash &> ~/bin/easyGit/gitTemp
	TMP_SCREEN=$(<~/bin/easyGit/gitTemp)
	lineNumber=52
	TMP_SCREEN=`echo "$TMP_SCREEN" | fold -b$(($lineNumber)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
	echo "Stockage des modifications locales"
	notification "Stockage des modifications locales"
}

git_stash_pop(){
	git stash pop &> ~/bin/easyGit/gitTemp
	FILE=`dirname $0`/gitTemp
	zenity --text-info \
		--title="Stash Pop" \
		--width=650 \
		--height=700 \
		--filename=$FILE

	case $? in
		0)
			echo "R√©cup√©ration des modifications locales"
			notification "R√©cup√©ration des modifications locales"
			;;
		1)
			echo "Git Stash Pop quitt√©"	;;
		-1)
			echo "An unexpected error has occurred." ;;
	esac
}

git_status(){
    git status > ~/bin/easyGit/gitTemp
	FILE=`dirname $0`/gitTemp
	zenity --text-info \
		--title="Status" \
		--width=650 \
		--height=700 \
		--filename=$FILE

	case $? in
		0)
			echo "Git Status" ;;
		1)
			echo "Git Status quitt√©" ;;
		-1)
			echo "An unexpected error has occurred." ;;
	esac
}

git_cherry_pick_skip(){
	git cherry-pick --skip
}

git_cherry_pick_abort(){
	git cherry-pick --abort
}

git_cherry_pick_operation(){
	actualBranch=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/actualBranch`
	readarray -t textHashArray < ~/bin/easyGit/ashesTexts

	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
	else
		if file=`zenity --list --title="Cherry Pick  üçí" --width=1150 --height=900 --text="Cherry pick depuis $actualBranch" --column="Hashs												   Textes" "${textHashArray[@]}"`; then
			file=`echo $file | head -c 40`
			titre=$file
			if [ "$titre" = "" ]; then
				echo "Pas de Cherry-Pick effectu√©"
			git_cherry_pick_operation 
			fi
		else
			echo "Annulation"
	   	fi
		if ([ -n "$titre" ]); then
		echo $titre
			git cherry-pick $titre &> ~/bin/easyGit/gitTemp
			FILE=`dirname $0`/gitTemp
			zenity --text-info \
				--title="Cherry-Pick" \
				--width=650 \
				--height=550 \
				--filename=$FILE

			case $? in
				0)
					echo "Cherry-Pick sur la branche $actualBranch du commit : $titre"
					checkFilesChanged
					notification "Cherry-Pick sur la branche $actualBranch du commit :
\t$titre"
					unset titre
					
					;;
				1)
					echo "Git Cherry-Pick quitt√©" 
					;;
				-1)
					echo "An unexpected error has occurred." ;;
			esac
		else
			echo "Pas de Cherry-Pick effectu√©"
			git_cherry_pick
		fi
		2>/dev/null
	fi
}

git_cherry_pick(){
	if file=`zenity --list --title="Cherry Pick  üçí" --height=205 --text="" --column="" "		   Picking 	    üçí" "		Confirmer 	    ‚úÖ" "		  Annuler 	    ‚ùå"`
		then
			titre=$file
			if [ "$titre" = "" ]; then
				echo "Pas de choix effectu√©"
			fi
		else
			fonction_infos
			echo "Annulation"
		fi
		if ([ -n "$titre" ]); then
			if [ "$titre" = "		   Picking 	    üçí" ]; then
				unset titre
				git_cherry_pick_operation
			elif [ "$titre" = "		Confirmer 	    ‚úÖ" ]; then
				unset titre
				git_cherry_pick_skip
			elif [ "$titre" = "		  Annuler 	    ‚ùå" ]; then
				unset titre
				git_cherry_pick_abort
			fi
		else
			echo "Pas de choix effectu√©"
	fi
}

git_log_terminal(){
	git config --global alias.tree "log --oneline --decorate --all --graph"
	git tree
}

git_log_simple(){
	git log --graph --summary > ~/bin/easyGit/gitTemp
	FILE=`dirname $0`/gitTemp
	zenity --text-info \
		--title="Log" \
		--width=950 \
		--height=1050 \
		--filename=$FILE

	case $? in
		0)
			echo "Git Log" ;;
		1)
			echo "Git Log quitt√©" ;;
		-1)
			echo "An unexpected error has occurred." ;;
	esac
}

git_log(){
	if file=`zenity --list --title="Log " --height=200 --text="" --column="Type de Log" "Simple" "Terminal (couleurs)"`
	 then
		titre=$file
		if [ "$titre" = "" ]; then
			echo "Pas de choix effectu√©"
		fi
	else
		fonction_infos
		echo "Annulation"
	fi
	if ([ -n "$titre" ]); then
		if [ "$titre" = "Simple" ]; then
			git_log_simple
		elif [ "$titre" = "Terminal (couleurs)" ]; then
			git_log_terminal
		fi
	else
		echo "Pas de choix effectu√©"
	fi
}

git_reflog(){
	git reflog --summary > ~/bin/easyGit/gitTemp
	FILE=`dirname $0`/gitTemp
	zenity --text-info \
		--title="Reflog" \
		--width=950 \
		--height=1050 \
		--filename=$FILE

	case $? in
		0)
			echo "Git Reflog" ;;
		1)
			echo "Git Reflog quitt√©" ;;
		-1)
			echo "An unexpected error has occurred." ;;
	esac
}

git_log_cherry(){
	git log --pretty=format:"%h %s" --graph > ~/bin/easyGit/gitTemp
	FILE=`dirname $0`/gitTemp
	zenity --text-info \
       --title="Log pour Cherry-Pick" \
	   --width=950 \
	   --height=1050 \
       --filename=$FILE

	case $? in
		0)
			echo "Log pour Cherry-Pick" ;;
		1)
			echo "Log pour Cherry-Pick quitt√©" ;;
		-1)
			echo "An unexpected error has occurred." ;;
	esac
}

git_branch(){
	git branch > ~/bin/easyGit/gitTemp
	FILE=`dirname $0`/gitTemp
	zenity --text-info \
       --title="Branch" \
	   --width=400 \
	   --height=350 \
       --filename=$FILE

	case $? in
		0)
			echo "Git Branch" ;;
		1)
			echo "Git Branch quitt√©" ;;
		-1)
			echo "An unexpected error has occurred." ;;
	esac
}

git_checkout(){
	if ret=`zenity --list --title="Checkout  ‚éá" --text="Git checkout ..." --column="Branches disponibles" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/branchesList)`; then
		titre=$ret
		if [ "$titre" = "" ]; then
			echo "Il faut une branche"
		fi
	else
		echo "Annulation"
	fi
	if ([ -n "$titre" ]); then
		git checkout $titre
		actualBranch=`cat .git/HEAD | cut -c 17-`
		cat .git/HEAD | cut -c 17- > ~/bin/easyGit/actualBranch
		unset titre
		echo "Basculement sur la branche :
$actualBranch"
		notification "Basculement sur la branche :
\t<b>$actualBranch</b>"
	else
		echo "Pas de branche choisie"
	fi
	2>/dev/null
}

git_add_all(){
	filesChangedAndUnfollowed=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed`
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
	elif [ "$filesChangedAndUnfollowed" = "" ]; then
		echo "Aucun fichier √† ajouter"
		notification "Aucun fichier √† ajouter"
	else
		git add -A
		checkFilesChanged
		echo "Fichiers ajout√©s au commit :
$(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesStaged)"
		notification "Fichiers ajout√©s au commit :
$(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesStaged)"
	fi
}

git_add(){
	checkFilesChanged
	filesChangedAndUnfollowed=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed`
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
	elif [ "$filesChangedAndUnfollowed" = "" ]; then
		echo "Aucun fichier √† ajouter"
		notification "Aucun fichier √† ajouter"
        else
		if file=`zenity --list --title="Add  Ôºã" --text="Git add ..." --column="Fichiers modifi√©s" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed)`; then
			titre=$file
			if [ "$titre" = "" ]; then
				echo "Pas de fichier ajout√©"
			fi
		else
			echo "Annulation"
	   	fi
		if ([ -n "$titre" ]); then
			git add $titre && echo "fichier" $titre "ajout√©"
			checkFilesChanged
			notification "Fichier ajout√© au commit :
\t$titre"
			unset titre
			git_add
		else
			echo "Pas de fichier ajout√©"
		fi
	2>/dev/null
	fi
}

git_add_single(){
	checkFilesChanged
	filesChangedAndUnfollowed=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed`
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
	elif [ "$filesChangedAndUnfollowed" = "" ]; then
		echo "Aucun fichier √† ajouter"
		notification "Aucun fichier √† ajouter"
	else
		if file=`zenity --list --title="Add  Ôºã" --text="Git add ..." --column="Fichiers modifi√©s" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed)`;	then
			titre=$file
			if [ "$titre" = "" ]; then
					echo "Pas de fichier ajout√©"
			fi
		else
			echo "Annulation"
		fi
		if ([ -n "$titre" ]); then
			git add $titre
			echo "fichier" $titre "ajout√©"
			checkFilesChanged
			notification "Fichier ajout√© au commit :
\t$titre"
			unset titre
		else
			echo "Pas de fichier ajout√©"
		fi
		2>/dev/null
	fi
}

git_reset_all(){
	filesStaged=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesStaged`
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
	elif [ "$filesStaged" = "" ]; then
		echo "Aucun fichier √† retirer"
		notification "Aucun fichier √† retirer"
	else
		git reset
		checkFilesChanged
		echo "Fichiers non suivis :
$(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed)"
		notification "Fichiers non suivis :
$(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed)"
	fi
}

git_reset(){
	filesStaged=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesStaged`
	checkFilesChanged
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
	elif [ "$filesStaged" = "" ]; then
		echo "Aucun fichier √† retirer"
		notification "Aucun fichier √† retirer"
	else
		if file=`zenity --list --title="Reset  ‚àí" --text="Git reset ..." --column="Fichiers ajout√©s" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesStaged)`; then
			titre=$file
			if [ "$titre" = "" ]; then
				echo "Pas de fichier supprim√©"
			fi
		else
			echo "Annulation"
		fi
		if ([ -n "$titre" ]); then
			git reset $titre && echo "fichier" $titre "supprim√©"
			checkFilesChanged
			notification "Fichier retir√© :
\t$titre"
			unset titre
			git_reset
		else
			echo "Pas de fichier supprim√©"
		fi
		2>/dev/null
	fi
}

git_remove_simple(){
	filesChangedAndUnfollowed=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed`
	checkFilesChanged
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
		git_remove
	elif [ "$filesChangedAndUnfollowed" = "" ]; then
		echo "Aucun fichier √† retirer du d√©pot"
		notification "Aucun fichier √† retirer du d√©pot"
		git_remove
	else
		if file=`zenity --list --title="Remove Simple ‚ùå" --text="Git rm ..." --column="Fichiers chang√©s et non-suivis" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed)`; then
			titre=$file
			if [ "$titre" = "" ]; then
				echo "Pas de fichier retir√© du d√©pot"
				git_remove
			fi
		else
			echo "Annulation"
		fi
		if ([ -n "$titre" ]); then
			git rm $titre && echo "fichier" $titre "retir√© du d√©pot (cached)"
			checkFilesChanged
			notification "Fichier retir√© du d√©pot (cached) :
\t$titre"
			unset titre
			git_remove_simple
		else
			git_remove
			echo "Pas de fichier retir√© du d√©pot"
		fi
		2>/dev/null
	fi
}

git_remove_simple_single(){
	filesChangedAndUnfollowed=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed`
	checkFilesChanged
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
		git_remove
	elif [ "$filesChangedAndUnfollowed" = "" ]; then
		echo "Aucun fichier √† retirer du d√©pot"
		notification "Aucun fichier √† retirer du d√©pot"
		git_remove
	else
		if file=`zenity --list --title="Remove Simple ‚ùå" --text="Git rm ..." --column="Fichiers chang√©s et non-suivis" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed)`; then
			titre=$file
			if [ "$titre" = "" ]; then
				echo "Pas de fichier retir√© du d√©pot"
			fi
		else
			echo "Annulation"
		fi
		if ([ -n "$titre" ]); then
			git rm $titre && echo "fichier" $titre "retir√© du d√©pot (cached)"
			checkFilesChanged
			notification "Fichier retir√© du d√©pot (cached) :
\t$titre"
			unset titre
		else
			echo "Pas de fichier retir√© du d√©pot"
			git_remove
		fi
		2>/dev/null
	fi
}

git_remove_cached(){
	filesChangedAndUnfollowed=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed`
	checkFilesChanged
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
		git_remove
	elif [ "$filesChangedAndUnfollowed" = "" ]; then
		echo "Aucun fichier √† retirer du d√©pot"
		notification "Aucun fichier √† retirer du d√©pot"
		git_remove
	else
		if file=`zenity --list --title="Remove Cached ‚ùå" --text="Git rm ..." --column="Fichiers chang√©s et non-suivis" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed)`; then
			titre=$file
			if [ "$titre" = "" ]; then
				echo "Pas de fichier retir√© du d√©pot"
			fi
		else
			echo "Annulation"
		fi
		if ([ -n "$titre" ]); then
			git rm --cached $titre && echo "fichier" $titre "retir√© du d√©pot (cached)"
			checkFilesChanged
			notification "Fichier retir√© du d√©pot (cached) :
\t$titre"
			unset titre
		else
			git_remove
			echo "Pas de fichier retir√© du d√©pot"
		fi
		2>/dev/null
	fi
}

git_remove_forced(){
	filesChangedAndUnfollowed=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed`
	checkFilesChanged
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit en cours"
		notification "Commit en cours üîè"
		git_remove
	elif [ "$filesChangedAndUnfollowed" = "" ]; then
		echo "Aucun fichier √† retirer du d√©pot"
		notification "Aucun fichier √† retirer du d√©pot"
		git_remove
	else
		if file=`zenity --list --title="Remove Forced ‚ùå" --text="Git rm ..." --column="Fichiers chang√©s et non-suivis" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed)`; then
			titre=$file
			if [ "$titre" = "" ]; then
				echo "Pas de fichier retir√© du d√©pot"
			fi
		else
			echo "Annulation"
		fi
		if ([ -n "$titre" ]); then
			git rm -f $titre && echo "fichier" $titre "retir√© du d√©pot (forced)"
			checkFilesChanged
			notification "Fichier retir√© du d√©pot (forced) :
\t$titre"
			unset titre
		else
			echo "Pas de fichier retir√© du d√©pot"
			git_remove
		fi
		2>/dev/null
	fi
}

git_remove(){
	if file=`zenity --list --title="Type de Remove ‚ùå" --height=200 --text="Git rm ..." --column="Type de Git Remove" "Simple" "Simple One" "Cached" "Forced"`; then
		titre=$file
		if [ "$titre" = "" ]; then
			echo "Pas de choix effectu√©"
		fi
		else
			echo "Annulation"
			git_erase
		fi
		if ([ -n "$titre" ]); then
			if [ "$titre" = "Simple" ]; then
				unset titre
				git_remove_simple
			elif [ "$titre" = "Simple One" ]; then
				unset titre
				git_remove_simple_single
			elif [ "$titre" = "Cached" ]; then
				unset titre
				git_remove_cached
			elif [ "$titre" = "Forced" ]; then
				unset titre
				git_remove_forced
			fi
		else
			echo "Pas de choix effectu√©"
		fi
		2>/dev/null
}

git_commit_reset(){
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		git reset HEAD^
		rm ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending
		rmdir ~/bin/easyGit/currentCommits/$HASH_COMMIT
		echo "Commit annul√©"
		notification "Commit annul√©"
	else
		zenity --question \
			--title "Commit Reset  ‚ùå" \
			--width=470 \
			--height=40 \
			--text "Aucun Commit en cours, souhaitez-vous vraiment continuer ?"
		if [ $? = 0 ]; then
			git reset HEAD^
			rm ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending
			rmdir ~/bin/easyGit/currentCommits/$HASH_COMMIT
			echo "Commit annul√©"
			notification "Commit annul√©"
		else
			echo "Op√©ration de Reset du Commit annul√©e"
			notification "Op√©ration de Reset du Commit annul√©e"
			git_erase
		fi
	fi
}

git_erase(){
	if file=`zenity --list --title="Erase ‚ùå" --height=200 --text="Git rm ..." --column="Type de Git Remove" "Remove" "Commit Reset"`; then
		titre=$file
		if [ "$titre" = "" ]; then
			echo "Pas de choix effectu√©"
		fi
	else
		fonction_fichiers
		echo "Annulation"
	fi
	if ([ -n "$titre" ]); then
		if [ "$titre" = "Remove" ]; then
			git_remove
		elif [ "$titre" = "Commit Reset" ]; then
			git_commit_reset
		fi
	else
		echo "Pas de choix effectu√©"
	fi
	2>/dev/null
}

git_commit(){
	filesStaged=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesStaged`
 	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		echo "Commit d√©j√† en cours"
		notification "Commit d√©j√† en cours üîè"
	else
		if [ "$filesStaged" = "" ]; then
			echo "Pas de fichier ajout√©"
			notification "Aucun fichier ajout√© pour commit"
		else
 			if ret=`zenity --entry --title="Commit  üìù" --width=1000 --text='Texte du commit'`; then
				titre=$ret
				if [ "$titre" = "" ]; then
					echo "Il faut un texte de commit"
				fi
			else
				echo "Annulation"
   			fi
			if ([ -n "$titre" ]); then
				git commit -m "$titre" &> ~/bin/easyGit/gitTemp
				TMP_SCREEN=$(<~/bin/easyGit/gitTemp)
				lineNumber=$(($totalLineNumber - $three))
				TMP_SCREEN=`echo "$TMP_SCREEN" | fold -b$(($lineNumber)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
				echo "Commit effectu√© :" $titre
				TEXT_COMMIT=$titre
				HASH_COMMIT=`git rev-parse HEAD`
				mkdir ~/bin/easyGit/currentCommits/$HASH_COMMIT
				touch ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending
				notification "Commit d√©fini :
\t$titre"
				unset titre
			else
				echo "Pas de commit effectu√©"
			fi
		fi
	fi
}

git_push(){
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		if ret=`zenity --list --title="Push  üì§" --text="Git push origin ..." --column="Branche actuelle" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/actualBranch)`; then
			titre=$ret
			if [ "$titre" = "" ]; then
				echo "Il faut une destination"
			fi
		else
			echo "Annulation"
		fi
		if ([ -n "$titre" ]); then
			git push origin $titre &> ~/bin/easyGit/gitTemp
			TMP_SCREEN=$(<~/bin/easyGit/gitTemp)
			lineNumber=$(($totalLineNumber - $three))
			TMP_SCREEN=`echo "$TMP_SCREEN" | fold -b$(($lineNumber)) -s | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
			echo "Push sur la branche" $titre "effectu√©"
			notification "Push sur la branche :
\t$titre"
			unset titre
			rm ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending
			rmdir ~/bin/easyGit/currentCommits/$HASH_COMMIT

			if [ "$?" = -1 ]; then
				zenity --error \
				--text="Mise √† jour annul√©e."
			fi
		else
			echo "Pas de Push effectu√©"
		fi
		2>/dev/null
	else
		echo "Aucun commit : push impossible"
		notification "Aucun commit : push impossible"
	fi
}

git_merge(){
	if ret=`zenity --list --title="Merge  üì•" --text="Git pull --merge origin ..." --column="Nom de branche" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/branchesList)`; then
		titre=$ret
		if [ "$titre" = "" ]; then
			echo "Il faut un d√©pot distant"
		fi
	else
		echo "Annulation"
   	fi
	if ([ -n "$titre" ]); then
		git merge origin $titre &> ~/bin/easyGit/gitTemp
		FILE=`dirname $0`/gitTemp
		zenity --text-info \
			--title="Merge" \
			--width=450 \
			--height=300 \
			--filename=$FILE

		case $? in
			0)
				echo "Git Pull en stat√©gie Merge de la branche $titre"
				notification "Git Pull en stat√©gie Merge de la branche $titre"
				unset titre
				;;
			1)
				echo "Git Merge quitt√©" ;;
			-1)
				echo "An unexpected error has occurred." ;;
		esac
	else
		echo "Pas de Pull Merge effectu√©"
	fi
	2>/dev/null
}

git_rebase(){
	if ret=`zenity --list --title="Rebase  üì•"--text="Git pull --rebase origin ..." --column="Nom de branche" $(sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/branchesList)`; then
		titre=$ret
			if [ "$titre" = "" ]; then
				echo "Il faut un d√©pot distant"
			fi
	else
		echo "Annulation"
   	fi
	if ([ -n "$titre" ]); then
		git pull --rebase origin $titre &> ~/bin/easyGit/gitTemp
		FILE=`dirname $0`/gitTemp
		zenity --text-info \
			--title="Rebase" \
			--width=450 \
			--height=300 \
			--filename=$FILE

		case $? in
			0)
				echo "Git Pull en stat√©gie Rebase de la branche $titre"
				notification "Git Pull en stat√©gie Merge de la branche $titre"
				unset titre
				;;
			1)
				echo "Git Rebase quitt√©" ;;
			-1)
				echo "An unexpected error has occurred." ;;
		esac
	else
		echo "Pas de Pull Rebase effectu√©"
	fi
	2>/dev/null
}

############### FILES DIALOG ####################

frm_fichiers(){
actualBranch=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/actualBranch`
checkFilesChanged
filesChanged=`sed ':z;N;$! bz;s/\n/ /g;s/ /,  /g' ~/bin/easyGit/filesChanged | fold -b$(($totalLineNumber + $fifteen)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
filesUnfollowed=`sed ':z;N;$! bz;s/\n/ /g;s/ /,  /g' ~/bin/easyGit/filesUnfollowed | fold -b$(($totalLineNumber + $fifteen)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
filesStaged=`sed ':z;N;$! bz;s/\n/ /g;s/ /,  /g' ~/bin/easyGit/filesStaged | fold -b$(($totalLineNumber + $fifteen)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
filesCommitted=`sed ':z;N;$! bz;s/\n/ /g;s/ /,  /g' ~/bin/easyGit/filesCommitted | fold -b$(($totalLineNumber + $fifteen)) -s  | ( TAB=$'\t' ; sed "s/^/$TAB/" )`
filesChangedAndUnfollowed=`sed ':z;N;$! bz;s/\n/ /g' ~/bin/easyGit/filesChangedAndUnfollowed`

BRANCH_DISPLAY="\t‚éá\t<span color=\"grey\">Branche :</span><span color=\"orange\"><b><i> [$actualBranch]</i></b></span>"
COMMIT_PENDING_SIGN_DISPLAY="<span color=\"grey\">Commit </span><span color=\"red\"><i>en cours</i></span>"
COMMIT_PENDING_LABEL_DISPLAY="\t<span color=\"gray\">üìù\tContenu</span>"
COMMIT_LABEL_DISPLAY="\t<span color=\"gray\">üìù\tDernier commit du <i>$LAST_COMMIT_DATE</i></span>"
COMMITTED_LABEL_DISPLAY="\t<span color=\"gray\">üóí\tCommit√©s</span>"
CHANGED_LABEL_DISPLAY="\t<span color=\"gray\">üîß\tModifi√©s</span>"
UNFOLLOWED_LABEL_DISPLAY="\t<span color=\"gray\">üß©\tNon suivis</span>"
STAGED_LABEL_DISPLAY="\t<span color=\"gray\">‚ûï\tAjout√©s</span>"

if [ "$fichiersDisplay" -eq 1 ]; then
	############################## -- Commit Pending -- ##############################
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		#=============== no modified and no untracked ===============
		if [ "$filesChangedAndUnfollowed" = "" ]; then
            EN_TETE="
$GIT
$BRANCH_DISPLAY
$SPACE_LINE$SIMPLE_LINE

$SPACE_COMMIT_PENDING$COMMIT_PENDING_SIGN_DISPLAY
$COMMIT_PENDING_LABEL_DISPLAY
<span><b>$TEXT_COMMIT</b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>

"
		#=============== some modified and no untracked ===============
		elif [[ "$filesUnfollowed" == "" ]] && [[ "$filesChanged" != "" ]] ; then
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$CHANGED_LABEL_DISPLAY
<span color=\"green\">$filesChanged</span>
$SPACE_LINE$SIMPLE_LINE

$SPACE_COMMIT_PENDING$COMMIT_PENDING_SIGN_DISPLAY

$COMMIT_PENDING_LABEL_DISPLAY

<span><b>$TEXT_COMMIT</b></span>
$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>

"
		#=============== no modified but some untracked ===============
		elif [[ "$filesChanged" == "" ]] && [[ "$filesUnfollowed" != "" ]]; then
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$UNFOLLOWED_LABEL_DISPLAY
<span color=\"#155162\">$filesUnfollowed</span>
$SPACE_LINE$SIMPLE_LINE

$SPACE_COMMIT_PENDING$COMMIT_PENDING_SIGN_DISPLAY
$COMMIT_PENDING_LABEL_DISPLAY
<span><b>$TEXT_COMMIT</b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>

"
		#=============== by default ===============
		else
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$CHANGED_LABEL_DISPLAY
<span color=\"green\">$filesChanged</span>

$UNFOLLOWED_LABEL_DISPLAY
<span color=\"#155162\">$filesUnfollowed</span>
$SPACE_LINE$SIMPLE_LINE

$SPACE_COMMIT_PENDING$COMMIT_PENDING_SIGN_DISPLAY
$COMMIT_PENDING_LABEL_DISPLAY
<span><b>$TEXT_COMMIT</b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>

"
		fi

	############################## -- By Default -- ##############################

	elif [ "$filesStaged" = "" ]; then
		#=============== no modified and no untracked ===============
		if [ "$filesChangedAndUnfollowed" = "" ]; then
			EN_TETE="
$GIT
$BRANCH_DISPLAY


$COMMIT_LABEL_DISPLAY
<span><b><i>$TEXT_COMMIT</i></b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>

"
		#=============== some modified and no untracked ===============
		elif [[ "$filesUnfollowed" == "" ]] && [[ "$filesChanged" != "" ]] ; then
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$COMMIT_LABEL_DISPLAY
<span><b><i>$TEXT_COMMIT</i></b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>
$SPACE_LINE$SIMPLE_LINE

$CHANGED_LABEL_DISPLAY
<span color=\"green\">$filesChanged</span>

"
		#=============== no modified but some untracked ===============
		elif [[ "$filesChanged" == "" ]] && [[ "$filesUnfollowed" != "" ]]; then
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$COMMIT_LABEL_DISPLAY
<span><b><i>$TEXT_COMMIT</i></b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>
$SPACE_LINE$SIMPLE_LINE

$UNFOLLOWED_LABEL_DISPLAY
<span color=\"#155162\">$filesUnfollowed</span>

"
		#=============== by default ===============
		else
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$COMMIT_LABEL_DISPLAY
<span><b><i>$TEXT_COMMIT</i></b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>
$SPACE_LINE$SIMPLE_LINE

$CHANGED_LABEL_DISPLAY
<span color=\"green\">$filesChanged</span>

$UNFOLLOWED_LABEL_DISPLAY
<span color=\"#155162\">$filesUnfollowed</span>

"
		fi
	############################## -- Files Added -- ##############################
	else
		#=============== no modified and no untracked ===============
		if [ "$filesChangedAndUnfollowed" = "" ]; then
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$COMMIT_LABEL_DISPLAY
<span><b><i>$TEXT_COMMIT</i></b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>
$SPACE_LINE$SIMPLE_LINE


$STAGED_LABEL_DISPLAY
<span color=\"orange\"><b>$filesStaged</b></span>

"
		#=============== some modified and no untracked ===============
		elif [[ "$filesUnfollowed" == "" ]] && [[ "$filesChanged" != "" ]] ; then
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$COMMIT_LABEL_DISPLAY
<span><b><i>$TEXT_COMMIT</i></b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>
$SPACE_LINE$SIMPLE_LINE

$CHANGED_LABEL_DISPLAY
<span color=\"green\">$filesChanged</span>


$STAGED_LABEL_DISPLAY
<span color=\"orange\"><b>$filesStaged</b></span>

"
		#=============== no modified and some untracked ===============
		elif [[ "$filesChanged" == "" ]] && [[ "$filesUnfollowed" != "" ]]; then
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$COMMIT_LABEL_DISPLAY
<span><b><i>$TEXT_COMMIT</i></b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>
$SPACE_LINE$SIMPLE_LINE

$UNFOLLOWED_LABEL_DISPLAY
<span color=\"#155162\">$filesUnfollowed</span>


$STAGED_LABEL_DISPLAY
<span color=\"orange\"><b>$filesStaged</b></span>

"
		#=============== by default ===============
		else
			EN_TETE="
$GIT
$BRANCH_DISPLAY

$COMMIT_LABEL_DISPLAY
<span><b><i>$TEXT_COMMIT</i></b></span>

$COMMITTED_LABEL_DISPLAY
<i>$filesCommitted</i>
$SPACE_LINE$SIMPLE_LINE

$CHANGED_LABEL_DISPLAY
<span color=\"green\">$filesChanged</span>

$UNFOLLOWED_LABEL_DISPLAY
<span color=\"#155162\">$filesUnfollowed</span>


$STAGED_LABEL_DISPLAY
<span color=\"orange\"><b>$filesStaged</b></span>

"
		fi
	fi
else
EN_TETE="
$GIT
$TMP_SCREEN

"
fi

# vertical responsiveness example
nbLines=`echo -n "$EN_TETE" | grep -c '^'`
oneLineHeight=17
linesHeight=$(($oneLineHeight * $nbLines))
2>/dev/null # bug zenity

if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
	if [ $fichiersDisplay -eq 1 ]; then
		bLines=`echo -n "$EN_TETE" | grep -c '^'`
		oneLineHeight=17
		linesHeight=$(($oneLineHeight * $nbLines))
		commandsHeight=240
		dialogFilesHeight=$(($commandsHeight + $linesHeight))
		zenity --list --width=$filesDialogWidth --height=$dialogFilesHeight --text='<span font-family=\"Arial\">'"$EN_TETE"'</span>' \
			--title="Fichiers üìë" \
			--ok-label="S√©lectionner" \
			--cancel-label="Quitter" \
			--hide-column 1 --column "" --column "" --column "" --column ""  --column "" \
			1 "    1" "$SPACE_PUSH$GP" "$SPACE_FILES_SYMBOL" "üì§" \
			0 "" "" "" ""\
			2 "    2" "$SPACE_COMMIT_RESET$GCR" "$SPACE_FILES_SYMBOL" "‚ùå" \
			3 "    3" "$SPACE_DISPLAY$AFF" "$SPACE_FILES_SYMBOL" "üíª" 2>/dev/null;
	else
		bLines=`echo -n "$EN_TETE" | grep -c '^'`
		oneLineHeight=17
		linesHeight=$(($oneLineHeight * $nbLines))
		commandsHeight=235
		dialogFilesHeight=$(($commandsHeight + $linesHeight))
		zenity --list --width=$filesDialogWidth --height=$dialogFilesHeight --text='<span font-family=\"Arial\">'"$EN_TETE"'</span>' \
			--title="Fichiers üìë" \
			--ok-label="S√©lectionner" \
			--cancel-label="Quitter" \
			--hide-column 1 --column "" --column "" --column "" --column ""  --column "" \
			1 "    1" "$SPACE_PUSH$GP" "$SPACE_FILES_SYMBOL" "üì§" \
			0 "" "" "" ""\
			2 "    2" "$SPACE_COMMIT_RESET$GCR" "$SPACE_FILES_SYMBOL" "‚ùå" \
			3 "    3" "$SPACE_DISPLAY$AFF" "$SPACE_FILES_SYMBOL" "üìü" 2>/dev/null;
	fi
else
	if [ $fichiersDisplay -eq 1 ]; then
		bLines=`echo -n "$EN_TETE" | grep -c '^'`
		oneLineHeight=17
		linesHeight=$(($oneLineHeight * $nbLines))
		commandsHeight=385
		dialogFilesHeight=$(($commandsHeight + $linesHeight))
		zenity --list --width=$filesDialogWidth --height=$dialogFilesHeight --text='<span font-family=\"Arial\">'"$EN_TETE"'</span>' \
			--title="Fichiers üìë" \
			--ok-label="S√©lectionner" \
			--cancel-label="Quitter" \
			--hide-column 1 --column "" --column "" --column "" --column ""  --column "" \
			1 "    1" "$SPACE_ADD$GA" "$SPACE_FILES_SYMBOL" "‚ûï" \
			2 "    2" "$SPACE_ADD_S$GAS" "$SPACE_FILES_SYMBOL" "‚ûï" \
			3 "    3" "$SPACE_COMMIT$GC" "$SPACE_FILES_SYMBOL" "üìù" \
			0 "" "" "" ""\
			4 "    4" "$SPACE_ADD_ALL$GAA" "$SPACE_FILES_SYMBOL" "‚ûï"\
			5 "    5" "$SPACE_RESET$GRT" "$SPACE_FILES_SYMBOL" "‚ûñ"\
			6 "    6" "$SPACE_RESET_ALL$GRA" "$SPACE_FILES_SYMBOL" "‚ûñ" \
			7 "    7" "$SPACE_RESET$GE" "$SPACE_FILES_SYMBOL" "‚ùå" \
			8 "    8" "$SPACE_DISPLAY$AFF" "$SPACE_FILES_SYMBOL" "üíª" \
			9 "    9" "$SPACE_CHANGE_WIDTH$CW" "$SPACE_FILES_SYMBOL" "üìè" 2>/dev/null;
	else
		bLines=`echo -n "$EN_TETE" | grep -c '^'`
		oneLineHeight=17
		linesHeight=$(($oneLineHeight * $nbLines))
		commandsHeight=380
		dialogFilesHeight=$(($commandsHeight + $linesHeight))
		zenity --list --width=$filesDialogWidth --height=$dialogFilesHeight --text='<span font-family=\"Arial\">'"$EN_TETE"'</span>' \
			--title="Fichiers üìë" \
			--ok-label="S√©lectionner" \
			--cancel-label="Quitter" \
			--hide-column 1 --column "" --column "" --column "" --column ""  --column "" \
			1 "    1" "$SPACE_ADD$GA" "$SPACE_FILES_SYMBOL" "‚ûï" \
			2 "    2" "$SPACE_ADD_S$GAS" "$SPACE_FILES_SYMBOL" "‚ûï" \
			3 "    3" "$SPACE_COMMIT$GC" "$SPACE_FILES_SYMBOL" "üìù" \
			0 "" "" "" ""\
			4 "    4" "$SPACE_ADD_ALL$GAA" "$SPACE_FILES_SYMBOL" "‚ûï" \
			5 "    5" "$SPACE_RESET$GRT" "$SPACE_FILES_SYMBOL" "‚ûñ" \
			6 "    6" "$SPACE_RESET_ALL$GRA" "$SPACE_FILES_SYMBOL" "‚ûñ" \
			7 "    7" "$SPACE_RESET$GE" "$SPACE_FILES_SYMBOL" "‚ùå" \
			8 "    8" "$SPACE_DISPLAY$AFF" "$SPACE_FILES_SYMBOL" "üìü" \
			9 "    9" "$SPACE_CHANGE_WIDTH$CW" "$SPACE_FILES_SYMBOL" "üìè" 2>/dev/null;
	fi
fi
}

frm_fichiers_parser(){
	if [ -e ~/bin/easyGit/currentCommits/$HASH_COMMIT/isCommitPending ]; then
		case $1 in
			1) git_push ;;
		#		quitter=1"
		#       _quitter
			2) git_commit_reset ;;
			3) switch_display ;;
			*) fonction_git ;;
		esac
	else
		case $1 in
			1) git_add ;;
			2) git_add_single ;;
			3) git_commit ;;
			4) git_add_all ;;
			5) git_reset ;;
			6) git_reset_all ;;
			7) git_erase ;;
			8) switch_display ;;
			9) change_width ;;
			*) fonction_git ;;
			esac
	fi
}

fonction_fichiers(){
	menuchoice=$(frm_fichiers)
	frm_fichiers_parser ${menuchoice%|*}
	if [ $quitter!="1" ]; then
		fonction_fichiers
	fi
}

############### REPOS DIALOG ####################

frm_depots(){
en_tete_depots
nbLines=`echo -n "$EN_TETE" | grep -c '^'`
commandsHeight=350
oneLineHeight=17
linesHeight=$(($oneLineHeight * $nbLines))
dialogRepoHeight=$(($commandsHeight + $linesHeight))
zenity --list --width=400 --height=$dialogRepoHeight --text='<span font-family=\"Arial\">'"$EN_TETE"'</span>' \
    --title="D√©pot üóÉ" \
    --ok-label="S√©lectionner" \
    --cancel-label="Quitter" \
    --hide-column 1 --column "" --column "" --column "" --column "" --column "" \
    1 "    1" "				         $GF" "			    " "üì©" \
    2 "    2" "				         $GS" "			    " "üîÅ" \
    3 "    3" "		                      $GSP" "			    " "üîÇ" \
    0 "" "" "" "" \
    4 "    4" "				       $GR" "			    " "üì•" \
    5 "    5" "				        $GM" "			    " "üì•" \
    0 "" "" "" "" \
    6 "    6" "				 $OR" "			    " "üåç" \
    7 "    7" "				        $GCL" "			     " "üìö" 2>/dev/null ;
}

frm_depots_parser(){
    case $1 in
        1) git_fetch ;;
        2) git_stash ;;
        3) git_stash_pop ;;
        4) git_rebase ;;
        5) git_merge ;;
        6) open_repo ;;
        7) git_clone ;;
        *) TMP_SCREEN=""
			fonction_git ;;
	esac
}

fonction_depots(){
	menuchoice=$(frm_depots)
	frm_depots_parser ${menuchoice%|*}
	if [ $quitter!="1" ]; then
		fonction_depots
	fi
}

############### INFOS DIALOG ####################

frm_infos(){
en_tete
zenity --list --width=400 --height=595 --text='<span font-family=\"Arial\">'"$EN_TETE"'</span>' \
    --title="Infos üìã" \
    --ok-label="S√©lectionner" \
    --cancel-label="Quitter" \
    --hide-column 1 --column "" --column "" --column "" --column "" --column "" \
    1 "    1" "				           $GL" "			      " "üìì" \
    2 "    2" "				     $GK" "			" "‚éá" \
	0 "" "" "" "" \
    3 "    3" "			                 $GST" "			      " "üîé" \
    4 "    4" "				   $CP" "		   " "üçí" \
    0 "" "" "" "" \
    5 "    5" "			                 $GLL" "			      " "üìÉ" \
    6 "    6" "			                 $GB" "			      " "‚éá" 2>/dev/null ;
}

frm_infos_parser(){
    case $1 in
        1) git_log ;;
        2) git_checkout ;;
        3) git_status ;;
		4) git_cherry_pick ;;
        5) git_reflog ;;
        6) git_branch ;;
        *) fonction_git ;;
        esac
}

fonction_infos(){
	menuchoice=$(frm_infos)
	frm_infos_parser ${menuchoice%|*}
	if [ $quitter!="1" ]; then
		fonction_infos
	fi
}

############### GENERAL DIALOG ####################

frm_git(){
	en_tete
	zenity --list --width=400 --height=500 --text='<span font-family=\"Arial\">'"$EN_TETE"'</span>' \
    	--title="Git" \
    	--ok-label="S√©lectionner" \
    	--cancel-label="Quitter" \
    	--hide-column 1 --column "" --column "" --column "" --column "" --column "" \
    	1 "  1" "				        $MD" "			     " "üóÉ" \
    	2 "  2" "				      $MF" "			     " "üìë" \
    	3 "  3" "			         $MI" "			     " "üìã" \
    	0 "" "" "" "" \
    	4 "  4" "				         $SC" "			     " "üóë" 2>/dev/null;
}

frm_git_parser(){
    case $1 in
        1) fonction_depots ;;
        2) fonction_fichiers ;;
		3) fonction_infos ;;
		4) clear_screen ;;
        *)
            quitter="1"
            _quitter ;;
    esac
}

fonction_git(){
	checkFilesChanged
	menuchoice=$(frm_git)
	frm_git_parser ${menuchoice%|*}
	if [ $quitter!="1" ]; then
        fonction_git
    fi
}

fonction_git
exit 0